<?php
/**
 * PublicEventAnalyticsFilterCoalescingRefineBy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Lists
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lists
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\Crm\Lists\Model;

use \ArrayAccess;
use \HubSpot\Client\Crm\Lists\ObjectSerializer;

/**
 * PublicEventAnalyticsFilterCoalescingRefineBy Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Lists
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PublicEventAnalyticsFilterCoalescingRefineBy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicEventAnalyticsFilter_coalescingRefineBy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_occurrences' => 'int',
        'type' => 'string',
        'min_occurrences' => 'int',
        'set_type' => 'string',
        'comparison' => 'string',
        'time_offset' => '\HubSpot\Client\Crm\Lists\Model\PublicTimeOffset',
        'upper_bound_offset' => '\HubSpot\Client\Crm\Lists\Model\PublicTimeOffset',
        'range_type' => 'string',
        'lower_bound_offset' => '\HubSpot\Client\Crm\Lists\Model\PublicTimeOffset',
        'timestamp' => 'int',
        'upper_timestamp' => 'int',
        'lower_timestamp' => 'int',
        'endpoint_behavior' => 'string',
        'include_objects_with_no_value_set' => 'bool',
        'property_parser' => 'string',
        'operation_type' => 'string',
        'time_point' => '\HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint',
        'operator' => 'string',
        'upper_bound_endpoint_behavior' => 'string',
        'upper_bound_time_point' => '\HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint',
        'lower_bound_endpoint_behavior' => 'string',
        'lower_bound_time_point' => '\HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'max_occurrences' => 'int32',
        'type' => null,
        'min_occurrences' => 'int32',
        'set_type' => null,
        'comparison' => null,
        'time_offset' => null,
        'upper_bound_offset' => null,
        'range_type' => null,
        'lower_bound_offset' => null,
        'timestamp' => 'int64',
        'upper_timestamp' => 'int64',
        'lower_timestamp' => 'int64',
        'endpoint_behavior' => null,
        'include_objects_with_no_value_set' => null,
        'property_parser' => null,
        'operation_type' => null,
        'time_point' => null,
        'operator' => null,
        'upper_bound_endpoint_behavior' => null,
        'upper_bound_time_point' => null,
        'lower_bound_endpoint_behavior' => null,
        'lower_bound_time_point' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'max_occurrences' => false,
        'type' => false,
        'min_occurrences' => false,
        'set_type' => false,
        'comparison' => false,
        'time_offset' => false,
        'upper_bound_offset' => false,
        'range_type' => false,
        'lower_bound_offset' => false,
        'timestamp' => false,
        'upper_timestamp' => false,
        'lower_timestamp' => false,
        'endpoint_behavior' => false,
        'include_objects_with_no_value_set' => false,
        'property_parser' => false,
        'operation_type' => false,
        'time_point' => false,
        'operator' => false,
        'upper_bound_endpoint_behavior' => false,
        'upper_bound_time_point' => false,
        'lower_bound_endpoint_behavior' => false,
        'lower_bound_time_point' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_occurrences' => 'maxOccurrences',
        'type' => 'type',
        'min_occurrences' => 'minOccurrences',
        'set_type' => 'setType',
        'comparison' => 'comparison',
        'time_offset' => 'timeOffset',
        'upper_bound_offset' => 'upperBoundOffset',
        'range_type' => 'rangeType',
        'lower_bound_offset' => 'lowerBoundOffset',
        'timestamp' => 'timestamp',
        'upper_timestamp' => 'upperTimestamp',
        'lower_timestamp' => 'lowerTimestamp',
        'endpoint_behavior' => 'endpointBehavior',
        'include_objects_with_no_value_set' => 'includeObjectsWithNoValueSet',
        'property_parser' => 'propertyParser',
        'operation_type' => 'operationType',
        'time_point' => 'timePoint',
        'operator' => 'operator',
        'upper_bound_endpoint_behavior' => 'upperBoundEndpointBehavior',
        'upper_bound_time_point' => 'upperBoundTimePoint',
        'lower_bound_endpoint_behavior' => 'lowerBoundEndpointBehavior',
        'lower_bound_time_point' => 'lowerBoundTimePoint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_occurrences' => 'setMaxOccurrences',
        'type' => 'setType',
        'min_occurrences' => 'setMinOccurrences',
        'set_type' => 'setSetType',
        'comparison' => 'setComparison',
        'time_offset' => 'setTimeOffset',
        'upper_bound_offset' => 'setUpperBoundOffset',
        'range_type' => 'setRangeType',
        'lower_bound_offset' => 'setLowerBoundOffset',
        'timestamp' => 'setTimestamp',
        'upper_timestamp' => 'setUpperTimestamp',
        'lower_timestamp' => 'setLowerTimestamp',
        'endpoint_behavior' => 'setEndpointBehavior',
        'include_objects_with_no_value_set' => 'setIncludeObjectsWithNoValueSet',
        'property_parser' => 'setPropertyParser',
        'operation_type' => 'setOperationType',
        'time_point' => 'setTimePoint',
        'operator' => 'setOperator',
        'upper_bound_endpoint_behavior' => 'setUpperBoundEndpointBehavior',
        'upper_bound_time_point' => 'setUpperBoundTimePoint',
        'lower_bound_endpoint_behavior' => 'setLowerBoundEndpointBehavior',
        'lower_bound_time_point' => 'setLowerBoundTimePoint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_occurrences' => 'getMaxOccurrences',
        'type' => 'getType',
        'min_occurrences' => 'getMinOccurrences',
        'set_type' => 'getSetType',
        'comparison' => 'getComparison',
        'time_offset' => 'getTimeOffset',
        'upper_bound_offset' => 'getUpperBoundOffset',
        'range_type' => 'getRangeType',
        'lower_bound_offset' => 'getLowerBoundOffset',
        'timestamp' => 'getTimestamp',
        'upper_timestamp' => 'getUpperTimestamp',
        'lower_timestamp' => 'getLowerTimestamp',
        'endpoint_behavior' => 'getEndpointBehavior',
        'include_objects_with_no_value_set' => 'getIncludeObjectsWithNoValueSet',
        'property_parser' => 'getPropertyParser',
        'operation_type' => 'getOperationType',
        'time_point' => 'getTimePoint',
        'operator' => 'getOperator',
        'upper_bound_endpoint_behavior' => 'getUpperBoundEndpointBehavior',
        'upper_bound_time_point' => 'getUpperBoundTimePoint',
        'lower_bound_endpoint_behavior' => 'getLowerBoundEndpointBehavior',
        'lower_bound_time_point' => 'getLowerBoundTimePoint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('max_occurrences', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('min_occurrences', $data ?? [], null);
        $this->setIfExists('set_type', $data ?? [], null);
        $this->setIfExists('comparison', $data ?? [], null);
        $this->setIfExists('time_offset', $data ?? [], null);
        $this->setIfExists('upper_bound_offset', $data ?? [], null);
        $this->setIfExists('range_type', $data ?? [], null);
        $this->setIfExists('lower_bound_offset', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('upper_timestamp', $data ?? [], null);
        $this->setIfExists('lower_timestamp', $data ?? [], null);
        $this->setIfExists('endpoint_behavior', $data ?? [], null);
        $this->setIfExists('include_objects_with_no_value_set', $data ?? [], null);
        $this->setIfExists('property_parser', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('time_point', $data ?? [], null);
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('upper_bound_endpoint_behavior', $data ?? [], null);
        $this->setIfExists('upper_bound_time_point', $data ?? [], null);
        $this->setIfExists('lower_bound_endpoint_behavior', $data ?? [], null);
        $this->setIfExists('lower_bound_time_point', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['set_type'] === null) {
            $invalidProperties[] = "'set_type' can't be null";
        }
        if ($this->container['comparison'] === null) {
            $invalidProperties[] = "'comparison' can't be null";
        }
        if ($this->container['time_offset'] === null) {
            $invalidProperties[] = "'time_offset' can't be null";
        }
        if ($this->container['upper_bound_offset'] === null) {
            $invalidProperties[] = "'upper_bound_offset' can't be null";
        }
        if ($this->container['range_type'] === null) {
            $invalidProperties[] = "'range_type' can't be null";
        }
        if ($this->container['lower_bound_offset'] === null) {
            $invalidProperties[] = "'lower_bound_offset' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['upper_timestamp'] === null) {
            $invalidProperties[] = "'upper_timestamp' can't be null";
        }
        if ($this->container['lower_timestamp'] === null) {
            $invalidProperties[] = "'lower_timestamp' can't be null";
        }
        if ($this->container['include_objects_with_no_value_set'] === null) {
            $invalidProperties[] = "'include_objects_with_no_value_set' can't be null";
        }
        if ($this->container['operation_type'] === null) {
            $invalidProperties[] = "'operation_type' can't be null";
        }
        if ($this->container['time_point'] === null) {
            $invalidProperties[] = "'time_point' can't be null";
        }
        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        if ($this->container['upper_bound_time_point'] === null) {
            $invalidProperties[] = "'upper_bound_time_point' can't be null";
        }
        if ($this->container['lower_bound_time_point'] === null) {
            $invalidProperties[] = "'lower_bound_time_point' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_occurrences
     *
     * @return int|null
     */
    public function getMaxOccurrences()
    {
        return $this->container['max_occurrences'];
    }

    /**
     * Sets max_occurrences
     *
     * @param int|null $max_occurrences max_occurrences
     *
     * @return self
     */
    public function setMaxOccurrences($max_occurrences)
    {
        if (is_null($max_occurrences)) {
            throw new \InvalidArgumentException('non-nullable max_occurrences cannot be null');
        }
        $this->container['max_occurrences'] = $max_occurrences;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets min_occurrences
     *
     * @return int|null
     */
    public function getMinOccurrences()
    {
        return $this->container['min_occurrences'];
    }

    /**
     * Sets min_occurrences
     *
     * @param int|null $min_occurrences min_occurrences
     *
     * @return self
     */
    public function setMinOccurrences($min_occurrences)
    {
        if (is_null($min_occurrences)) {
            throw new \InvalidArgumentException('non-nullable min_occurrences cannot be null');
        }
        $this->container['min_occurrences'] = $min_occurrences;

        return $this;
    }

    /**
     * Gets set_type
     *
     * @return string
     */
    public function getSetType()
    {
        return $this->container['set_type'];
    }

    /**
     * Sets set_type
     *
     * @param string $set_type set_type
     *
     * @return self
     */
    public function setSetType($set_type)
    {
        if (is_null($set_type)) {
            throw new \InvalidArgumentException('non-nullable set_type cannot be null');
        }
        $this->container['set_type'] = $set_type;

        return $this;
    }

    /**
     * Gets comparison
     *
     * @return string
     */
    public function getComparison()
    {
        return $this->container['comparison'];
    }

    /**
     * Sets comparison
     *
     * @param string $comparison comparison
     *
     * @return self
     */
    public function setComparison($comparison)
    {
        if (is_null($comparison)) {
            throw new \InvalidArgumentException('non-nullable comparison cannot be null');
        }
        $this->container['comparison'] = $comparison;

        return $this;
    }

    /**
     * Gets time_offset
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicTimeOffset
     */
    public function getTimeOffset()
    {
        return $this->container['time_offset'];
    }

    /**
     * Sets time_offset
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicTimeOffset $time_offset time_offset
     *
     * @return self
     */
    public function setTimeOffset($time_offset)
    {
        if (is_null($time_offset)) {
            throw new \InvalidArgumentException('non-nullable time_offset cannot be null');
        }
        $this->container['time_offset'] = $time_offset;

        return $this;
    }

    /**
     * Gets upper_bound_offset
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicTimeOffset
     */
    public function getUpperBoundOffset()
    {
        return $this->container['upper_bound_offset'];
    }

    /**
     * Sets upper_bound_offset
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicTimeOffset $upper_bound_offset upper_bound_offset
     *
     * @return self
     */
    public function setUpperBoundOffset($upper_bound_offset)
    {
        if (is_null($upper_bound_offset)) {
            throw new \InvalidArgumentException('non-nullable upper_bound_offset cannot be null');
        }
        $this->container['upper_bound_offset'] = $upper_bound_offset;

        return $this;
    }

    /**
     * Gets range_type
     *
     * @return string
     */
    public function getRangeType()
    {
        return $this->container['range_type'];
    }

    /**
     * Sets range_type
     *
     * @param string $range_type range_type
     *
     * @return self
     */
    public function setRangeType($range_type)
    {
        if (is_null($range_type)) {
            throw new \InvalidArgumentException('non-nullable range_type cannot be null');
        }
        $this->container['range_type'] = $range_type;

        return $this;
    }

    /**
     * Gets lower_bound_offset
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicTimeOffset
     */
    public function getLowerBoundOffset()
    {
        return $this->container['lower_bound_offset'];
    }

    /**
     * Sets lower_bound_offset
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicTimeOffset $lower_bound_offset lower_bound_offset
     *
     * @return self
     */
    public function setLowerBoundOffset($lower_bound_offset)
    {
        if (is_null($lower_bound_offset)) {
            throw new \InvalidArgumentException('non-nullable lower_bound_offset cannot be null');
        }
        $this->container['lower_bound_offset'] = $lower_bound_offset;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets upper_timestamp
     *
     * @return int
     */
    public function getUpperTimestamp()
    {
        return $this->container['upper_timestamp'];
    }

    /**
     * Sets upper_timestamp
     *
     * @param int $upper_timestamp upper_timestamp
     *
     * @return self
     */
    public function setUpperTimestamp($upper_timestamp)
    {
        if (is_null($upper_timestamp)) {
            throw new \InvalidArgumentException('non-nullable upper_timestamp cannot be null');
        }
        $this->container['upper_timestamp'] = $upper_timestamp;

        return $this;
    }

    /**
     * Gets lower_timestamp
     *
     * @return int
     */
    public function getLowerTimestamp()
    {
        return $this->container['lower_timestamp'];
    }

    /**
     * Sets lower_timestamp
     *
     * @param int $lower_timestamp lower_timestamp
     *
     * @return self
     */
    public function setLowerTimestamp($lower_timestamp)
    {
        if (is_null($lower_timestamp)) {
            throw new \InvalidArgumentException('non-nullable lower_timestamp cannot be null');
        }
        $this->container['lower_timestamp'] = $lower_timestamp;

        return $this;
    }

    /**
     * Gets endpoint_behavior
     *
     * @return string|null
     */
    public function getEndpointBehavior()
    {
        return $this->container['endpoint_behavior'];
    }

    /**
     * Sets endpoint_behavior
     *
     * @param string|null $endpoint_behavior endpoint_behavior
     *
     * @return self
     */
    public function setEndpointBehavior($endpoint_behavior)
    {
        if (is_null($endpoint_behavior)) {
            throw new \InvalidArgumentException('non-nullable endpoint_behavior cannot be null');
        }
        $this->container['endpoint_behavior'] = $endpoint_behavior;

        return $this;
    }

    /**
     * Gets include_objects_with_no_value_set
     *
     * @return bool
     */
    public function getIncludeObjectsWithNoValueSet()
    {
        return $this->container['include_objects_with_no_value_set'];
    }

    /**
     * Sets include_objects_with_no_value_set
     *
     * @param bool $include_objects_with_no_value_set include_objects_with_no_value_set
     *
     * @return self
     */
    public function setIncludeObjectsWithNoValueSet($include_objects_with_no_value_set)
    {
        if (is_null($include_objects_with_no_value_set)) {
            throw new \InvalidArgumentException('non-nullable include_objects_with_no_value_set cannot be null');
        }
        $this->container['include_objects_with_no_value_set'] = $include_objects_with_no_value_set;

        return $this;
    }

    /**
     * Gets property_parser
     *
     * @return string|null
     */
    public function getPropertyParser()
    {
        return $this->container['property_parser'];
    }

    /**
     * Sets property_parser
     *
     * @param string|null $property_parser property_parser
     *
     * @return self
     */
    public function setPropertyParser($property_parser)
    {
        if (is_null($property_parser)) {
            throw new \InvalidArgumentException('non-nullable property_parser cannot be null');
        }
        $this->container['property_parser'] = $property_parser;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string $operation_type operation_type
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {
        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets time_point
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint
     */
    public function getTimePoint()
    {
        return $this->container['time_point'];
    }

    /**
     * Sets time_point
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint $time_point time_point
     *
     * @return self
     */
    public function setTimePoint($time_point)
    {
        if (is_null($time_point)) {
            throw new \InvalidArgumentException('non-nullable time_point cannot be null');
        }
        $this->container['time_point'] = $time_point;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets upper_bound_endpoint_behavior
     *
     * @return string|null
     */
    public function getUpperBoundEndpointBehavior()
    {
        return $this->container['upper_bound_endpoint_behavior'];
    }

    /**
     * Sets upper_bound_endpoint_behavior
     *
     * @param string|null $upper_bound_endpoint_behavior upper_bound_endpoint_behavior
     *
     * @return self
     */
    public function setUpperBoundEndpointBehavior($upper_bound_endpoint_behavior)
    {
        if (is_null($upper_bound_endpoint_behavior)) {
            throw new \InvalidArgumentException('non-nullable upper_bound_endpoint_behavior cannot be null');
        }
        $this->container['upper_bound_endpoint_behavior'] = $upper_bound_endpoint_behavior;

        return $this;
    }

    /**
     * Gets upper_bound_time_point
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint
     */
    public function getUpperBoundTimePoint()
    {
        return $this->container['upper_bound_time_point'];
    }

    /**
     * Sets upper_bound_time_point
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint $upper_bound_time_point upper_bound_time_point
     *
     * @return self
     */
    public function setUpperBoundTimePoint($upper_bound_time_point)
    {
        if (is_null($upper_bound_time_point)) {
            throw new \InvalidArgumentException('non-nullable upper_bound_time_point cannot be null');
        }
        $this->container['upper_bound_time_point'] = $upper_bound_time_point;

        return $this;
    }

    /**
     * Gets lower_bound_endpoint_behavior
     *
     * @return string|null
     */
    public function getLowerBoundEndpointBehavior()
    {
        return $this->container['lower_bound_endpoint_behavior'];
    }

    /**
     * Sets lower_bound_endpoint_behavior
     *
     * @param string|null $lower_bound_endpoint_behavior lower_bound_endpoint_behavior
     *
     * @return self
     */
    public function setLowerBoundEndpointBehavior($lower_bound_endpoint_behavior)
    {
        if (is_null($lower_bound_endpoint_behavior)) {
            throw new \InvalidArgumentException('non-nullable lower_bound_endpoint_behavior cannot be null');
        }
        $this->container['lower_bound_endpoint_behavior'] = $lower_bound_endpoint_behavior;

        return $this;
    }

    /**
     * Gets lower_bound_time_point
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint
     */
    public function getLowerBoundTimePoint()
    {
        return $this->container['lower_bound_time_point'];
    }

    /**
     * Sets lower_bound_time_point
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicTimePointOperationTimePoint $lower_bound_time_point lower_bound_time_point
     *
     * @return self
     */
    public function setLowerBoundTimePoint($lower_bound_time_point)
    {
        if (is_null($lower_bound_time_point)) {
            throw new \InvalidArgumentException('non-nullable lower_bound_time_point cannot be null');
        }
        $this->container['lower_bound_time_point'] = $lower_bound_time_point;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


