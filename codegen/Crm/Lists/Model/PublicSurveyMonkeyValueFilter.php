<?php
/**
 * PublicSurveyMonkeyValueFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Lists
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lists
 *
 * CRUD operations to manage lists and list memberships
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\Crm\Lists\Model;

use \ArrayAccess;
use \HubSpot\Client\Crm\Lists\ObjectSerializer;

/**
 * PublicSurveyMonkeyValueFilter Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Lists
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PublicSurveyMonkeyValueFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicSurveyMonkeyValueFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filter_type' => 'string',
        'survey_id' => 'string',
        'survey_question' => 'string',
        'survey_answer_row_id' => 'string',
        'survey_answer_col_id' => 'string',
        'value_comparison' => '\HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation',
        'operator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filter_type' => null,
        'survey_id' => null,
        'survey_question' => null,
        'survey_answer_row_id' => null,
        'survey_answer_col_id' => null,
        'value_comparison' => null,
        'operator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filter_type' => 'filterType',
        'survey_id' => 'surveyId',
        'survey_question' => 'surveyQuestion',
        'survey_answer_row_id' => 'surveyAnswerRowId',
        'survey_answer_col_id' => 'surveyAnswerColId',
        'value_comparison' => 'valueComparison',
        'operator' => 'operator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filter_type' => 'setFilterType',
        'survey_id' => 'setSurveyId',
        'survey_question' => 'setSurveyQuestion',
        'survey_answer_row_id' => 'setSurveyAnswerRowId',
        'survey_answer_col_id' => 'setSurveyAnswerColId',
        'value_comparison' => 'setValueComparison',
        'operator' => 'setOperator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filter_type' => 'getFilterType',
        'survey_id' => 'getSurveyId',
        'survey_question' => 'getSurveyQuestion',
        'survey_answer_row_id' => 'getSurveyAnswerRowId',
        'survey_answer_col_id' => 'getSurveyAnswerColId',
        'value_comparison' => 'getValueComparison',
        'operator' => 'getOperator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FILTER_TYPE_SURVEY_MONKEY_VALUE = 'SURVEY_MONKEY_VALUE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterTypeAllowableValues()
    {
        return [
            self::FILTER_TYPE_SURVEY_MONKEY_VALUE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filter_type'] = $data['filter_type'] ?? 'SURVEY_MONKEY_VALUE';
        $this->container['survey_id'] = $data['survey_id'] ?? null;
        $this->container['survey_question'] = $data['survey_question'] ?? null;
        $this->container['survey_answer_row_id'] = $data['survey_answer_row_id'] ?? null;
        $this->container['survey_answer_col_id'] = $data['survey_answer_col_id'] ?? null;
        $this->container['value_comparison'] = $data['value_comparison'] ?? null;
        $this->container['operator'] = $data['operator'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['filter_type'] === null) {
            $invalidProperties[] = "'filter_type' can't be null";
        }
        $allowedValues = $this->getFilterTypeAllowableValues();
        if (!is_null($this->container['filter_type']) && !in_array($this->container['filter_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filter_type', must be one of '%s'",
                $this->container['filter_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['survey_id'] === null) {
            $invalidProperties[] = "'survey_id' can't be null";
        }
        if ($this->container['survey_question'] === null) {
            $invalidProperties[] = "'survey_question' can't be null";
        }
        if ($this->container['value_comparison'] === null) {
            $invalidProperties[] = "'value_comparison' can't be null";
        }
        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filter_type
     *
     * @return string
     */
    public function getFilterType()
    {
        return $this->container['filter_type'];
    }

    /**
     * Sets filter_type
     *
     * @param string $filter_type filter_type
     *
     * @return self
     */
    public function setFilterType($filter_type)
    {
        $allowedValues = $this->getFilterTypeAllowableValues();
        if (!in_array($filter_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filter_type', must be one of '%s'",
                    $filter_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter_type'] = $filter_type;

        return $this;
    }

    /**
     * Gets survey_id
     *
     * @return string
     */
    public function getSurveyId()
    {
        return $this->container['survey_id'];
    }

    /**
     * Sets survey_id
     *
     * @param string $survey_id survey_id
     *
     * @return self
     */
    public function setSurveyId($survey_id)
    {
        $this->container['survey_id'] = $survey_id;

        return $this;
    }

    /**
     * Gets survey_question
     *
     * @return string
     */
    public function getSurveyQuestion()
    {
        return $this->container['survey_question'];
    }

    /**
     * Sets survey_question
     *
     * @param string $survey_question survey_question
     *
     * @return self
     */
    public function setSurveyQuestion($survey_question)
    {
        $this->container['survey_question'] = $survey_question;

        return $this;
    }

    /**
     * Gets survey_answer_row_id
     *
     * @return string|null
     */
    public function getSurveyAnswerRowId()
    {
        return $this->container['survey_answer_row_id'];
    }

    /**
     * Sets survey_answer_row_id
     *
     * @param string|null $survey_answer_row_id survey_answer_row_id
     *
     * @return self
     */
    public function setSurveyAnswerRowId($survey_answer_row_id)
    {
        $this->container['survey_answer_row_id'] = $survey_answer_row_id;

        return $this;
    }

    /**
     * Gets survey_answer_col_id
     *
     * @return string|null
     */
    public function getSurveyAnswerColId()
    {
        return $this->container['survey_answer_col_id'];
    }

    /**
     * Sets survey_answer_col_id
     *
     * @param string|null $survey_answer_col_id survey_answer_col_id
     *
     * @return self
     */
    public function setSurveyAnswerColId($survey_answer_col_id)
    {
        $this->container['survey_answer_col_id'] = $survey_answer_col_id;

        return $this;
    }

    /**
     * Gets value_comparison
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation
     */
    public function getValueComparison()
    {
        return $this->container['value_comparison'];
    }

    /**
     * Sets value_comparison
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation $value_comparison value_comparison
     *
     * @return self
     */
    public function setValueComparison($value_comparison)
    {
        $this->container['value_comparison'] = $value_comparison;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


