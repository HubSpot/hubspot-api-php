<?php
/**
 * PublicPropertyAssociationFilterBranchFiltersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Lists
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lists
 *
 * CRUD operations to manage lists and list memberships
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\Crm\Lists\Model;

use \ArrayAccess;
use \HubSpot\Client\Crm\Lists\ObjectSerializer;

/**
 * PublicPropertyAssociationFilterBranchFiltersInner Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Lists
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PublicPropertyAssociationFilterBranchFiltersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicPropertyAssociationFilterBranch_filters_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filter_type' => 'string',
        'property' => 'string',
        'operation' => '\HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation',
        'coalescing_refine_by' => '\HubSpot\Client\Crm\Lists\Model\PublicEventAnalyticsFilterCoalescingRefineBy',
        'operator' => 'string',
        'list_id' => 'int',
        'to_object_type_id' => 'string',
        'association_type_id' => 'int',
        'association_category' => 'string',
        'to_object_type' => 'string',
        'pruning_refine_by' => '\HubSpot\Client\Crm\Lists\Model\PublicEventAnalyticsFilterCoalescingRefineBy',
        'enable_tracking' => 'bool',
        'page_url' => 'string',
        'cta_name' => 'string',
        'event_id' => 'string',
        'form_id' => 'string',
        'page_id' => 'string',
        'event_type_id' => 'string',
        'filter_lines' => '\HubSpot\Client\Crm\Lists\Model\PublicEventFilterMetadata[]',
        'subscription_ids' => 'int[]',
        'accepted_statuses' => 'string[]',
        'subscription_type' => 'string',
        'channel' => 'string',
        'accepted_opt_states' => 'string[]',
        'business_unit_id' => 'int',
        'campaign_id' => 'string',
        'survey_id' => 'string',
        'survey_question' => 'string',
        'survey_answer_row_id' => 'string',
        'survey_answer_col_id' => 'string',
        'value_comparison' => '\HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation',
        'webinar_id' => 'string',
        'level' => 'string',
        'email_id' => 'int',
        'app_id' => 'int',
        'click_url' => 'string',
        'privacy_name' => 'string',
        'entity_type' => 'string',
        'search_term_type' => 'string',
        'search_terms' => 'string[]',
        'ad_network' => 'string',
        'metadata' => '\HubSpot\Client\Crm\Lists\Model\PublicInListFilterMetadata',
        'property_with_object_id' => 'string',
        'should_accept' => 'bool',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filter_type' => null,
        'property' => null,
        'operation' => null,
        'coalescing_refine_by' => null,
        'operator' => null,
        'list_id' => 'int32',
        'to_object_type_id' => null,
        'association_type_id' => 'int32',
        'association_category' => null,
        'to_object_type' => null,
        'pruning_refine_by' => null,
        'enable_tracking' => null,
        'page_url' => null,
        'cta_name' => null,
        'event_id' => null,
        'form_id' => null,
        'page_id' => null,
        'event_type_id' => null,
        'filter_lines' => null,
        'subscription_ids' => 'int64',
        'accepted_statuses' => null,
        'subscription_type' => null,
        'channel' => null,
        'accepted_opt_states' => null,
        'business_unit_id' => 'int64',
        'campaign_id' => null,
        'survey_id' => null,
        'survey_question' => null,
        'survey_answer_row_id' => null,
        'survey_answer_col_id' => null,
        'value_comparison' => null,
        'webinar_id' => null,
        'level' => null,
        'email_id' => 'int32',
        'app_id' => 'int32',
        'click_url' => null,
        'privacy_name' => null,
        'entity_type' => null,
        'search_term_type' => null,
        'search_terms' => null,
        'ad_network' => null,
        'metadata' => null,
        'property_with_object_id' => null,
        'should_accept' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filter_type' => 'filterType',
        'property' => 'property',
        'operation' => 'operation',
        'coalescing_refine_by' => 'coalescingRefineBy',
        'operator' => 'operator',
        'list_id' => 'listId',
        'to_object_type_id' => 'toObjectTypeId',
        'association_type_id' => 'associationTypeId',
        'association_category' => 'associationCategory',
        'to_object_type' => 'toObjectType',
        'pruning_refine_by' => 'pruningRefineBy',
        'enable_tracking' => 'enableTracking',
        'page_url' => 'pageUrl',
        'cta_name' => 'ctaName',
        'event_id' => 'eventId',
        'form_id' => 'formId',
        'page_id' => 'pageId',
        'event_type_id' => 'eventTypeId',
        'filter_lines' => 'filterLines',
        'subscription_ids' => 'subscriptionIds',
        'accepted_statuses' => 'acceptedStatuses',
        'subscription_type' => 'subscriptionType',
        'channel' => 'channel',
        'accepted_opt_states' => 'acceptedOptStates',
        'business_unit_id' => 'businessUnitId',
        'campaign_id' => 'campaignId',
        'survey_id' => 'surveyId',
        'survey_question' => 'surveyQuestion',
        'survey_answer_row_id' => 'surveyAnswerRowId',
        'survey_answer_col_id' => 'surveyAnswerColId',
        'value_comparison' => 'valueComparison',
        'webinar_id' => 'webinarId',
        'level' => 'level',
        'email_id' => 'emailId',
        'app_id' => 'appId',
        'click_url' => 'clickUrl',
        'privacy_name' => 'privacyName',
        'entity_type' => 'entityType',
        'search_term_type' => 'searchTermType',
        'search_terms' => 'searchTerms',
        'ad_network' => 'adNetwork',
        'metadata' => 'metadata',
        'property_with_object_id' => 'propertyWithObjectId',
        'should_accept' => 'shouldAccept',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filter_type' => 'setFilterType',
        'property' => 'setProperty',
        'operation' => 'setOperation',
        'coalescing_refine_by' => 'setCoalescingRefineBy',
        'operator' => 'setOperator',
        'list_id' => 'setListId',
        'to_object_type_id' => 'setToObjectTypeId',
        'association_type_id' => 'setAssociationTypeId',
        'association_category' => 'setAssociationCategory',
        'to_object_type' => 'setToObjectType',
        'pruning_refine_by' => 'setPruningRefineBy',
        'enable_tracking' => 'setEnableTracking',
        'page_url' => 'setPageUrl',
        'cta_name' => 'setCtaName',
        'event_id' => 'setEventId',
        'form_id' => 'setFormId',
        'page_id' => 'setPageId',
        'event_type_id' => 'setEventTypeId',
        'filter_lines' => 'setFilterLines',
        'subscription_ids' => 'setSubscriptionIds',
        'accepted_statuses' => 'setAcceptedStatuses',
        'subscription_type' => 'setSubscriptionType',
        'channel' => 'setChannel',
        'accepted_opt_states' => 'setAcceptedOptStates',
        'business_unit_id' => 'setBusinessUnitId',
        'campaign_id' => 'setCampaignId',
        'survey_id' => 'setSurveyId',
        'survey_question' => 'setSurveyQuestion',
        'survey_answer_row_id' => 'setSurveyAnswerRowId',
        'survey_answer_col_id' => 'setSurveyAnswerColId',
        'value_comparison' => 'setValueComparison',
        'webinar_id' => 'setWebinarId',
        'level' => 'setLevel',
        'email_id' => 'setEmailId',
        'app_id' => 'setAppId',
        'click_url' => 'setClickUrl',
        'privacy_name' => 'setPrivacyName',
        'entity_type' => 'setEntityType',
        'search_term_type' => 'setSearchTermType',
        'search_terms' => 'setSearchTerms',
        'ad_network' => 'setAdNetwork',
        'metadata' => 'setMetadata',
        'property_with_object_id' => 'setPropertyWithObjectId',
        'should_accept' => 'setShouldAccept',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filter_type' => 'getFilterType',
        'property' => 'getProperty',
        'operation' => 'getOperation',
        'coalescing_refine_by' => 'getCoalescingRefineBy',
        'operator' => 'getOperator',
        'list_id' => 'getListId',
        'to_object_type_id' => 'getToObjectTypeId',
        'association_type_id' => 'getAssociationTypeId',
        'association_category' => 'getAssociationCategory',
        'to_object_type' => 'getToObjectType',
        'pruning_refine_by' => 'getPruningRefineBy',
        'enable_tracking' => 'getEnableTracking',
        'page_url' => 'getPageUrl',
        'cta_name' => 'getCtaName',
        'event_id' => 'getEventId',
        'form_id' => 'getFormId',
        'page_id' => 'getPageId',
        'event_type_id' => 'getEventTypeId',
        'filter_lines' => 'getFilterLines',
        'subscription_ids' => 'getSubscriptionIds',
        'accepted_statuses' => 'getAcceptedStatuses',
        'subscription_type' => 'getSubscriptionType',
        'channel' => 'getChannel',
        'accepted_opt_states' => 'getAcceptedOptStates',
        'business_unit_id' => 'getBusinessUnitId',
        'campaign_id' => 'getCampaignId',
        'survey_id' => 'getSurveyId',
        'survey_question' => 'getSurveyQuestion',
        'survey_answer_row_id' => 'getSurveyAnswerRowId',
        'survey_answer_col_id' => 'getSurveyAnswerColId',
        'value_comparison' => 'getValueComparison',
        'webinar_id' => 'getWebinarId',
        'level' => 'getLevel',
        'email_id' => 'getEmailId',
        'app_id' => 'getAppId',
        'click_url' => 'getClickUrl',
        'privacy_name' => 'getPrivacyName',
        'entity_type' => 'getEntityType',
        'search_term_type' => 'getSearchTermType',
        'search_terms' => 'getSearchTerms',
        'ad_network' => 'getAdNetwork',
        'metadata' => 'getMetadata',
        'property_with_object_id' => 'getPropertyWithObjectId',
        'should_accept' => 'getShouldAccept',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FILTER_TYPE_UNIFIED_EVENTS_IN_LIST = 'UNIFIED_EVENTS_IN_LIST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterTypeAllowableValues()
    {
        return [
            self::FILTER_TYPE_UNIFIED_EVENTS_IN_LIST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filter_type'] = $data['filter_type'] ?? 'UNIFIED_EVENTS_IN_LIST';
        $this->container['property'] = $data['property'] ?? null;
        $this->container['operation'] = $data['operation'] ?? null;
        $this->container['coalescing_refine_by'] = $data['coalescing_refine_by'] ?? null;
        $this->container['operator'] = $data['operator'] ?? null;
        $this->container['list_id'] = $data['list_id'] ?? null;
        $this->container['to_object_type_id'] = $data['to_object_type_id'] ?? null;
        $this->container['association_type_id'] = $data['association_type_id'] ?? null;
        $this->container['association_category'] = $data['association_category'] ?? null;
        $this->container['to_object_type'] = $data['to_object_type'] ?? null;
        $this->container['pruning_refine_by'] = $data['pruning_refine_by'] ?? null;
        $this->container['enable_tracking'] = $data['enable_tracking'] ?? null;
        $this->container['page_url'] = $data['page_url'] ?? null;
        $this->container['cta_name'] = $data['cta_name'] ?? null;
        $this->container['event_id'] = $data['event_id'] ?? null;
        $this->container['form_id'] = $data['form_id'] ?? null;
        $this->container['page_id'] = $data['page_id'] ?? null;
        $this->container['event_type_id'] = $data['event_type_id'] ?? null;
        $this->container['filter_lines'] = $data['filter_lines'] ?? null;
        $this->container['subscription_ids'] = $data['subscription_ids'] ?? null;
        $this->container['accepted_statuses'] = $data['accepted_statuses'] ?? null;
        $this->container['subscription_type'] = $data['subscription_type'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['accepted_opt_states'] = $data['accepted_opt_states'] ?? null;
        $this->container['business_unit_id'] = $data['business_unit_id'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['survey_id'] = $data['survey_id'] ?? null;
        $this->container['survey_question'] = $data['survey_question'] ?? null;
        $this->container['survey_answer_row_id'] = $data['survey_answer_row_id'] ?? null;
        $this->container['survey_answer_col_id'] = $data['survey_answer_col_id'] ?? null;
        $this->container['value_comparison'] = $data['value_comparison'] ?? null;
        $this->container['webinar_id'] = $data['webinar_id'] ?? null;
        $this->container['level'] = $data['level'] ?? null;
        $this->container['email_id'] = $data['email_id'] ?? null;
        $this->container['app_id'] = $data['app_id'] ?? null;
        $this->container['click_url'] = $data['click_url'] ?? null;
        $this->container['privacy_name'] = $data['privacy_name'] ?? null;
        $this->container['entity_type'] = $data['entity_type'] ?? null;
        $this->container['search_term_type'] = $data['search_term_type'] ?? null;
        $this->container['search_terms'] = $data['search_terms'] ?? null;
        $this->container['ad_network'] = $data['ad_network'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['property_with_object_id'] = $data['property_with_object_id'] ?? null;
        $this->container['should_accept'] = $data['should_accept'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['filter_type'] === null) {
            $invalidProperties[] = "'filter_type' can't be null";
        }
        $allowedValues = $this->getFilterTypeAllowableValues();
        if (!is_null($this->container['filter_type']) && !in_array($this->container['filter_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'filter_type', must be one of '%s'",
                $this->container['filter_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['property'] === null) {
            $invalidProperties[] = "'property' can't be null";
        }
        if ($this->container['operation'] === null) {
            $invalidProperties[] = "'operation' can't be null";
        }
        if ($this->container['coalescing_refine_by'] === null) {
            $invalidProperties[] = "'coalescing_refine_by' can't be null";
        }
        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        if ($this->container['list_id'] === null) {
            $invalidProperties[] = "'list_id' can't be null";
        }
        if ($this->container['association_type_id'] === null) {
            $invalidProperties[] = "'association_type_id' can't be null";
        }
        if ($this->container['association_category'] === null) {
            $invalidProperties[] = "'association_category' can't be null";
        }
        if ($this->container['pruning_refine_by'] === null) {
            $invalidProperties[] = "'pruning_refine_by' can't be null";
        }
        if ($this->container['page_url'] === null) {
            $invalidProperties[] = "'page_url' can't be null";
        }
        if ($this->container['cta_name'] === null) {
            $invalidProperties[] = "'cta_name' can't be null";
        }
        if ($this->container['event_id'] === null) {
            $invalidProperties[] = "'event_id' can't be null";
        }
        if ($this->container['page_id'] === null) {
            $invalidProperties[] = "'page_id' can't be null";
        }
        if ($this->container['event_type_id'] === null) {
            $invalidProperties[] = "'event_type_id' can't be null";
        }
        if ($this->container['filter_lines'] === null) {
            $invalidProperties[] = "'filter_lines' can't be null";
        }
        if ($this->container['subscription_ids'] === null) {
            $invalidProperties[] = "'subscription_ids' can't be null";
        }
        if ($this->container['accepted_statuses'] === null) {
            $invalidProperties[] = "'accepted_statuses' can't be null";
        }
        if ($this->container['subscription_type'] === null) {
            $invalidProperties[] = "'subscription_type' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['accepted_opt_states'] === null) {
            $invalidProperties[] = "'accepted_opt_states' can't be null";
        }
        if ($this->container['campaign_id'] === null) {
            $invalidProperties[] = "'campaign_id' can't be null";
        }
        if ($this->container['survey_id'] === null) {
            $invalidProperties[] = "'survey_id' can't be null";
        }
        if ($this->container['survey_question'] === null) {
            $invalidProperties[] = "'survey_question' can't be null";
        }
        if ($this->container['value_comparison'] === null) {
            $invalidProperties[] = "'value_comparison' can't be null";
        }
        if ($this->container['level'] === null) {
            $invalidProperties[] = "'level' can't be null";
        }
        if ($this->container['email_id'] === null) {
            $invalidProperties[] = "'email_id' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['privacy_name'] === null) {
            $invalidProperties[] = "'privacy_name' can't be null";
        }
        if ($this->container['entity_type'] === null) {
            $invalidProperties[] = "'entity_type' can't be null";
        }
        if ($this->container['search_term_type'] === null) {
            $invalidProperties[] = "'search_term_type' can't be null";
        }
        if ($this->container['search_terms'] === null) {
            $invalidProperties[] = "'search_terms' can't be null";
        }
        if ($this->container['ad_network'] === null) {
            $invalidProperties[] = "'ad_network' can't be null";
        }
        if ($this->container['property_with_object_id'] === null) {
            $invalidProperties[] = "'property_with_object_id' can't be null";
        }
        if ($this->container['should_accept'] === null) {
            $invalidProperties[] = "'should_accept' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filter_type
     *
     * @return string
     */
    public function getFilterType()
    {
        return $this->container['filter_type'];
    }

    /**
     * Sets filter_type
     *
     * @param string $filter_type filter_type
     *
     * @return self
     */
    public function setFilterType($filter_type)
    {
        $allowedValues = $this->getFilterTypeAllowableValues();
        if (!in_array($filter_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'filter_type', must be one of '%s'",
                    $filter_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter_type'] = $filter_type;

        return $this;
    }

    /**
     * Gets property
     *
     * @return string
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     *
     * @param string $property property
     *
     * @return self
     */
    public function setProperty($property)
    {
        $this->container['property'] = $property;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation $operation operation
     *
     * @return self
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets coalescing_refine_by
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicEventAnalyticsFilterCoalescingRefineBy
     */
    public function getCoalescingRefineBy()
    {
        return $this->container['coalescing_refine_by'];
    }

    /**
     * Sets coalescing_refine_by
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicEventAnalyticsFilterCoalescingRefineBy $coalescing_refine_by coalescing_refine_by
     *
     * @return self
     */
    public function setCoalescingRefineBy($coalescing_refine_by)
    {
        $this->container['coalescing_refine_by'] = $coalescing_refine_by;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets list_id
     *
     * @return int
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param int $list_id list_id
     *
     * @return self
     */
    public function setListId($list_id)
    {
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets to_object_type_id
     *
     * @return string|null
     */
    public function getToObjectTypeId()
    {
        return $this->container['to_object_type_id'];
    }

    /**
     * Sets to_object_type_id
     *
     * @param string|null $to_object_type_id to_object_type_id
     *
     * @return self
     */
    public function setToObjectTypeId($to_object_type_id)
    {
        $this->container['to_object_type_id'] = $to_object_type_id;

        return $this;
    }

    /**
     * Gets association_type_id
     *
     * @return int
     */
    public function getAssociationTypeId()
    {
        return $this->container['association_type_id'];
    }

    /**
     * Sets association_type_id
     *
     * @param int $association_type_id association_type_id
     *
     * @return self
     */
    public function setAssociationTypeId($association_type_id)
    {
        $this->container['association_type_id'] = $association_type_id;

        return $this;
    }

    /**
     * Gets association_category
     *
     * @return string
     */
    public function getAssociationCategory()
    {
        return $this->container['association_category'];
    }

    /**
     * Sets association_category
     *
     * @param string $association_category association_category
     *
     * @return self
     */
    public function setAssociationCategory($association_category)
    {
        $this->container['association_category'] = $association_category;

        return $this;
    }

    /**
     * Gets to_object_type
     *
     * @return string|null
     */
    public function getToObjectType()
    {
        return $this->container['to_object_type'];
    }

    /**
     * Sets to_object_type
     *
     * @param string|null $to_object_type to_object_type
     *
     * @return self
     */
    public function setToObjectType($to_object_type)
    {
        $this->container['to_object_type'] = $to_object_type;

        return $this;
    }

    /**
     * Gets pruning_refine_by
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicEventAnalyticsFilterCoalescingRefineBy
     */
    public function getPruningRefineBy()
    {
        return $this->container['pruning_refine_by'];
    }

    /**
     * Sets pruning_refine_by
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicEventAnalyticsFilterCoalescingRefineBy $pruning_refine_by pruning_refine_by
     *
     * @return self
     */
    public function setPruningRefineBy($pruning_refine_by)
    {
        $this->container['pruning_refine_by'] = $pruning_refine_by;

        return $this;
    }

    /**
     * Gets enable_tracking
     *
     * @return bool|null
     */
    public function getEnableTracking()
    {
        return $this->container['enable_tracking'];
    }

    /**
     * Sets enable_tracking
     *
     * @param bool|null $enable_tracking enable_tracking
     *
     * @return self
     */
    public function setEnableTracking($enable_tracking)
    {
        $this->container['enable_tracking'] = $enable_tracking;

        return $this;
    }

    /**
     * Gets page_url
     *
     * @return string
     */
    public function getPageUrl()
    {
        return $this->container['page_url'];
    }

    /**
     * Sets page_url
     *
     * @param string $page_url page_url
     *
     * @return self
     */
    public function setPageUrl($page_url)
    {
        $this->container['page_url'] = $page_url;

        return $this;
    }

    /**
     * Gets cta_name
     *
     * @return string
     */
    public function getCtaName()
    {
        return $this->container['cta_name'];
    }

    /**
     * Sets cta_name
     *
     * @param string $cta_name cta_name
     *
     * @return self
     */
    public function setCtaName($cta_name)
    {
        $this->container['cta_name'] = $cta_name;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return string|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param string|null $form_id form_id
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets page_id
     *
     * @return string
     */
    public function getPageId()
    {
        return $this->container['page_id'];
    }

    /**
     * Sets page_id
     *
     * @param string $page_id page_id
     *
     * @return self
     */
    public function setPageId($page_id)
    {
        $this->container['page_id'] = $page_id;

        return $this;
    }

    /**
     * Gets event_type_id
     *
     * @return string
     */
    public function getEventTypeId()
    {
        return $this->container['event_type_id'];
    }

    /**
     * Sets event_type_id
     *
     * @param string $event_type_id event_type_id
     *
     * @return self
     */
    public function setEventTypeId($event_type_id)
    {
        $this->container['event_type_id'] = $event_type_id;

        return $this;
    }

    /**
     * Gets filter_lines
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicEventFilterMetadata[]
     */
    public function getFilterLines()
    {
        return $this->container['filter_lines'];
    }

    /**
     * Sets filter_lines
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicEventFilterMetadata[] $filter_lines filter_lines
     *
     * @return self
     */
    public function setFilterLines($filter_lines)
    {
        $this->container['filter_lines'] = $filter_lines;

        return $this;
    }

    /**
     * Gets subscription_ids
     *
     * @return int[]
     */
    public function getSubscriptionIds()
    {
        return $this->container['subscription_ids'];
    }

    /**
     * Sets subscription_ids
     *
     * @param int[] $subscription_ids subscription_ids
     *
     * @return self
     */
    public function setSubscriptionIds($subscription_ids)
    {
        $this->container['subscription_ids'] = $subscription_ids;

        return $this;
    }

    /**
     * Gets accepted_statuses
     *
     * @return string[]
     */
    public function getAcceptedStatuses()
    {
        return $this->container['accepted_statuses'];
    }

    /**
     * Sets accepted_statuses
     *
     * @param string[] $accepted_statuses accepted_statuses
     *
     * @return self
     */
    public function setAcceptedStatuses($accepted_statuses)
    {
        $this->container['accepted_statuses'] = $accepted_statuses;

        return $this;
    }

    /**
     * Gets subscription_type
     *
     * @return string
     */
    public function getSubscriptionType()
    {
        return $this->container['subscription_type'];
    }

    /**
     * Sets subscription_type
     *
     * @param string $subscription_type subscription_type
     *
     * @return self
     */
    public function setSubscriptionType($subscription_type)
    {
        $this->container['subscription_type'] = $subscription_type;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets accepted_opt_states
     *
     * @return string[]
     */
    public function getAcceptedOptStates()
    {
        return $this->container['accepted_opt_states'];
    }

    /**
     * Sets accepted_opt_states
     *
     * @param string[] $accepted_opt_states accepted_opt_states
     *
     * @return self
     */
    public function setAcceptedOptStates($accepted_opt_states)
    {
        $this->container['accepted_opt_states'] = $accepted_opt_states;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int|null
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int|null $business_unit_id business_unit_id
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id campaign_id
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets survey_id
     *
     * @return string
     */
    public function getSurveyId()
    {
        return $this->container['survey_id'];
    }

    /**
     * Sets survey_id
     *
     * @param string $survey_id survey_id
     *
     * @return self
     */
    public function setSurveyId($survey_id)
    {
        $this->container['survey_id'] = $survey_id;

        return $this;
    }

    /**
     * Gets survey_question
     *
     * @return string
     */
    public function getSurveyQuestion()
    {
        return $this->container['survey_question'];
    }

    /**
     * Sets survey_question
     *
     * @param string $survey_question survey_question
     *
     * @return self
     */
    public function setSurveyQuestion($survey_question)
    {
        $this->container['survey_question'] = $survey_question;

        return $this;
    }

    /**
     * Gets survey_answer_row_id
     *
     * @return string|null
     */
    public function getSurveyAnswerRowId()
    {
        return $this->container['survey_answer_row_id'];
    }

    /**
     * Sets survey_answer_row_id
     *
     * @param string|null $survey_answer_row_id survey_answer_row_id
     *
     * @return self
     */
    public function setSurveyAnswerRowId($survey_answer_row_id)
    {
        $this->container['survey_answer_row_id'] = $survey_answer_row_id;

        return $this;
    }

    /**
     * Gets survey_answer_col_id
     *
     * @return string|null
     */
    public function getSurveyAnswerColId()
    {
        return $this->container['survey_answer_col_id'];
    }

    /**
     * Sets survey_answer_col_id
     *
     * @param string|null $survey_answer_col_id survey_answer_col_id
     *
     * @return self
     */
    public function setSurveyAnswerColId($survey_answer_col_id)
    {
        $this->container['survey_answer_col_id'] = $survey_answer_col_id;

        return $this;
    }

    /**
     * Gets value_comparison
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation
     */
    public function getValueComparison()
    {
        return $this->container['value_comparison'];
    }

    /**
     * Sets value_comparison
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicPropertyFilterOperation $value_comparison value_comparison
     *
     * @return self
     */
    public function setValueComparison($value_comparison)
    {
        $this->container['value_comparison'] = $value_comparison;

        return $this;
    }

    /**
     * Gets webinar_id
     *
     * @return string|null
     */
    public function getWebinarId()
    {
        return $this->container['webinar_id'];
    }

    /**
     * Sets webinar_id
     *
     * @param string|null $webinar_id webinar_id
     *
     * @return self
     */
    public function setWebinarId($webinar_id)
    {
        $this->container['webinar_id'] = $webinar_id;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return self
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets email_id
     *
     * @return int
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     *
     * @param int $email_id email_id
     *
     * @return self
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id app_id
     *
     * @return self
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets click_url
     *
     * @return string|null
     */
    public function getClickUrl()
    {
        return $this->container['click_url'];
    }

    /**
     * Sets click_url
     *
     * @param string|null $click_url click_url
     *
     * @return self
     */
    public function setClickUrl($click_url)
    {
        $this->container['click_url'] = $click_url;

        return $this;
    }

    /**
     * Gets privacy_name
     *
     * @return string
     */
    public function getPrivacyName()
    {
        return $this->container['privacy_name'];
    }

    /**
     * Sets privacy_name
     *
     * @param string $privacy_name privacy_name
     *
     * @return self
     */
    public function setPrivacyName($privacy_name)
    {
        $this->container['privacy_name'] = $privacy_name;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type entity_type
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets search_term_type
     *
     * @return string
     */
    public function getSearchTermType()
    {
        return $this->container['search_term_type'];
    }

    /**
     * Sets search_term_type
     *
     * @param string $search_term_type search_term_type
     *
     * @return self
     */
    public function setSearchTermType($search_term_type)
    {
        $this->container['search_term_type'] = $search_term_type;

        return $this;
    }

    /**
     * Gets search_terms
     *
     * @return string[]
     */
    public function getSearchTerms()
    {
        return $this->container['search_terms'];
    }

    /**
     * Sets search_terms
     *
     * @param string[] $search_terms search_terms
     *
     * @return self
     */
    public function setSearchTerms($search_terms)
    {
        $this->container['search_terms'] = $search_terms;

        return $this;
    }

    /**
     * Gets ad_network
     *
     * @return string
     */
    public function getAdNetwork()
    {
        return $this->container['ad_network'];
    }

    /**
     * Sets ad_network
     *
     * @param string $ad_network ad_network
     *
     * @return self
     */
    public function setAdNetwork($ad_network)
    {
        $this->container['ad_network'] = $ad_network;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \HubSpot\Client\Crm\Lists\Model\PublicInListFilterMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \HubSpot\Client\Crm\Lists\Model\PublicInListFilterMetadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets property_with_object_id
     *
     * @return string
     */
    public function getPropertyWithObjectId()
    {
        return $this->container['property_with_object_id'];
    }

    /**
     * Sets property_with_object_id
     *
     * @param string $property_with_object_id property_with_object_id
     *
     * @return self
     */
    public function setPropertyWithObjectId($property_with_object_id)
    {
        $this->container['property_with_object_id'] = $property_with_object_id;

        return $this;
    }

    /**
     * Gets should_accept
     *
     * @return bool
     */
    public function getShouldAccept()
    {
        return $this->container['should_accept'];
    }

    /**
     * Sets should_accept
     *
     * @param bool $should_accept should_accept
     *
     * @return self
     */
    public function setShouldAccept($should_accept)
    {
        $this->container['should_accept'] = $should_accept;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


