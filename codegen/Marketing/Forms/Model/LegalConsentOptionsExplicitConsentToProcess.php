<?php
/**
 * LegalConsentOptionsExplicitConsentToProcess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  HubSpot\Client\Marketing\Forms
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Forms
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\Marketing\Forms\Model;

use \ArrayAccess;
use \HubSpot\Client\Marketing\Forms\ObjectSerializer;

/**
 * LegalConsentOptionsExplicitConsentToProcess Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\Marketing\Forms
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LegalConsentOptionsExplicitConsentToProcess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LegalConsentOptionsExplicitConsentToProcess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'communication_consent_text' => 'string',
        'communications_checkboxes' => '\HubSpot\Client\Marketing\Forms\Model\LegalConsentCheckbox[]',
        'consent_to_process_text' => 'string',
        'consent_to_process_checkbox_label' => 'string',
        'consent_to_process_footer_text' => 'string',
        'privacy_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'communication_consent_text' => null,
        'communications_checkboxes' => null,
        'consent_to_process_text' => null,
        'consent_to_process_checkbox_label' => null,
        'consent_to_process_footer_text' => null,
        'privacy_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'communication_consent_text' => false,
        'communications_checkboxes' => false,
        'consent_to_process_text' => false,
        'consent_to_process_checkbox_label' => false,
        'consent_to_process_footer_text' => false,
        'privacy_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'communication_consent_text' => 'communicationConsentText',
        'communications_checkboxes' => 'communicationsCheckboxes',
        'consent_to_process_text' => 'consentToProcessText',
        'consent_to_process_checkbox_label' => 'consentToProcessCheckboxLabel',
        'consent_to_process_footer_text' => 'consentToProcessFooterText',
        'privacy_text' => 'privacyText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'communication_consent_text' => 'setCommunicationConsentText',
        'communications_checkboxes' => 'setCommunicationsCheckboxes',
        'consent_to_process_text' => 'setConsentToProcessText',
        'consent_to_process_checkbox_label' => 'setConsentToProcessCheckboxLabel',
        'consent_to_process_footer_text' => 'setConsentToProcessFooterText',
        'privacy_text' => 'setPrivacyText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'communication_consent_text' => 'getCommunicationConsentText',
        'communications_checkboxes' => 'getCommunicationsCheckboxes',
        'consent_to_process_text' => 'getConsentToProcessText',
        'consent_to_process_checkbox_label' => 'getConsentToProcessCheckboxLabel',
        'consent_to_process_footer_text' => 'getConsentToProcessFooterText',
        'privacy_text' => 'getPrivacyText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_EXPLICIT_CONSENT_TO_PROCESS = 'explicit_consent_to_process';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EXPLICIT_CONSENT_TO_PROCESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], 'explicit_consent_to_process');
        $this->setIfExists('communication_consent_text', $data ?? [], null);
        $this->setIfExists('communications_checkboxes', $data ?? [], null);
        $this->setIfExists('consent_to_process_text', $data ?? [], null);
        $this->setIfExists('consent_to_process_checkbox_label', $data ?? [], null);
        $this->setIfExists('consent_to_process_footer_text', $data ?? [], null);
        $this->setIfExists('privacy_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['communications_checkboxes'] === null) {
            $invalidProperties[] = "'communications_checkboxes' can't be null";
        }
        if ($this->container['privacy_text'] === null) {
            $invalidProperties[] = "'privacy_text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets communication_consent_text
     *
     * @return string|null
     */
    public function getCommunicationConsentText()
    {
        return $this->container['communication_consent_text'];
    }

    /**
     * Sets communication_consent_text
     *
     * @param string|null $communication_consent_text communication_consent_text
     *
     * @return self
     */
    public function setCommunicationConsentText($communication_consent_text)
    {
        if (is_null($communication_consent_text)) {
            throw new \InvalidArgumentException('non-nullable communication_consent_text cannot be null');
        }
        $this->container['communication_consent_text'] = $communication_consent_text;

        return $this;
    }

    /**
     * Gets communications_checkboxes
     *
     * @return \HubSpot\Client\Marketing\Forms\Model\LegalConsentCheckbox[]
     */
    public function getCommunicationsCheckboxes()
    {
        return $this->container['communications_checkboxes'];
    }

    /**
     * Sets communications_checkboxes
     *
     * @param \HubSpot\Client\Marketing\Forms\Model\LegalConsentCheckbox[] $communications_checkboxes communications_checkboxes
     *
     * @return self
     */
    public function setCommunicationsCheckboxes($communications_checkboxes)
    {
        if (is_null($communications_checkboxes)) {
            throw new \InvalidArgumentException('non-nullable communications_checkboxes cannot be null');
        }
        $this->container['communications_checkboxes'] = $communications_checkboxes;

        return $this;
    }

    /**
     * Gets consent_to_process_text
     *
     * @return string|null
     */
    public function getConsentToProcessText()
    {
        return $this->container['consent_to_process_text'];
    }

    /**
     * Sets consent_to_process_text
     *
     * @param string|null $consent_to_process_text consent_to_process_text
     *
     * @return self
     */
    public function setConsentToProcessText($consent_to_process_text)
    {
        if (is_null($consent_to_process_text)) {
            throw new \InvalidArgumentException('non-nullable consent_to_process_text cannot be null');
        }
        $this->container['consent_to_process_text'] = $consent_to_process_text;

        return $this;
    }

    /**
     * Gets consent_to_process_checkbox_label
     *
     * @return string|null
     */
    public function getConsentToProcessCheckboxLabel()
    {
        return $this->container['consent_to_process_checkbox_label'];
    }

    /**
     * Sets consent_to_process_checkbox_label
     *
     * @param string|null $consent_to_process_checkbox_label consent_to_process_checkbox_label
     *
     * @return self
     */
    public function setConsentToProcessCheckboxLabel($consent_to_process_checkbox_label)
    {
        if (is_null($consent_to_process_checkbox_label)) {
            throw new \InvalidArgumentException('non-nullable consent_to_process_checkbox_label cannot be null');
        }
        $this->container['consent_to_process_checkbox_label'] = $consent_to_process_checkbox_label;

        return $this;
    }

    /**
     * Gets consent_to_process_footer_text
     *
     * @return string|null
     */
    public function getConsentToProcessFooterText()
    {
        return $this->container['consent_to_process_footer_text'];
    }

    /**
     * Sets consent_to_process_footer_text
     *
     * @param string|null $consent_to_process_footer_text consent_to_process_footer_text
     *
     * @return self
     */
    public function setConsentToProcessFooterText($consent_to_process_footer_text)
    {
        if (is_null($consent_to_process_footer_text)) {
            throw new \InvalidArgumentException('non-nullable consent_to_process_footer_text cannot be null');
        }
        $this->container['consent_to_process_footer_text'] = $consent_to_process_footer_text;

        return $this;
    }

    /**
     * Gets privacy_text
     *
     * @return string
     */
    public function getPrivacyText()
    {
        return $this->container['privacy_text'];
    }

    /**
     * Sets privacy_text
     *
     * @param string $privacy_text privacy_text
     *
     * @return self
     */
    public function setPrivacyText($privacy_text)
    {
        if (is_null($privacy_text)) {
            throw new \InvalidArgumentException('non-nullable privacy_text cannot be null');
        }
        $this->container['privacy_text'] = $privacy_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


